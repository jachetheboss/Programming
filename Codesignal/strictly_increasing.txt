You are given an array of non-negative integers numbers. You are allowed to choose any number from this array and swap any two digits in it. If after the swap operation the number contains leading zeros, they can be omitted and not considered (eg: 010 will be considered just 10).

Your task is to check whether it is possible to apply the swap operation at most once, so that the elements of the resulting array are strictly increasing.

1 ≤ numbers.length ≤ 103,
0 ≤ numbers[i] ≤ 103.
def solution(numbers):
    
    if len(numbers) == 1:
        return True
    
    non_increasing = 0
    indices = []
    for i in range(len(numbers) - 1):
        if numbers[i + 1] <= numbers[i]:
            indices.append(i)
            indices.append(i + 1)
            non_increasing += 1
    
    if non_increasing == 0:
        return True
    elif non_increasing >= 2:
        return False
    else: # non_increasing == 1
        print("indices", indices)
        for index in indices:
            num = str(numbers[index])
            for i in range(len(num) - 1):
                for j in range(i + 1, len(num)):
                    a = num[i]
                    b = num[j]
                    temp = num[ :i] + b + num[i + 1: j] + a + num[j + 1: ]
                    print("temp", temp)
                    if index == 0:
                        if int(temp) < numbers[index + 1]:
                            return True
                    elif index == len(numbers) - 1:
                        if int(temp) > numbers[index - 1]:
                            return True
                    else:                        
                        if numbers[index - 1] < int(temp) < numbers[index + 1]:
                            return True
        
    return False
                
                
        

# import requests
# import mysql.connector
# import pandas as pd

####### what if ip addresses spill over across newlines?
####### then the parsing would have to be more meticulous
import os

digits = {"0","1","2","3", "4", "5", "6", "7", "8", "9"}

searched = set()
root = "/root/data"
path = "/root/data"
stack = [root]
ip_addresses = []
# while root not in searched: # another way is
# while len(stack) != 0:
while root not in searched:
# for _ in range(1):
    directory = os.listdir(path)
    dead_end = True
    for x in directory:
        is_file = False
        for c in x:
            if c == ".":
                is_file = True
                break
        if not is_file: # if it is a directory
            if path + "/" + x in searched:
                continue
            # else
            path += "/" + x
            stack.append(path)
            dead_end = False
            break
        else: # elif is_file
            if path + "/" + x in searched:
                continue
            path += "/" + x
            searched.add(path)
            stack.append(path)
            fin = open(path, "r")
            while True:
            # for _ in range(1):
                line = fin.readline()
                # print("line", line)
                # print("len(line)", len(line))
                if line == "":
                    break
                ip_candidate = ""
                # state = "searching" # or "collecting"
                # can make state an int for much faster
                # comparison, and thus runtime
                # for le in line: ####### don't reuse
                # variables!
                for le in line:
                    # print(repr(le))
                    if le in digits or le == ".":
                        # state = "collecting"
                        ip_candidate += le
                    else:
                        # .split("."), pythonic routine
                        # much cleaner and more elegant than a
                        # bootleg indexing and slicing solution
                        nums = ip_candidate.strip().split(".")
                        if len(nums) != 4:
                            ip_candidate = ""
                            continue
                        invalid_number = False
                        for num in nums:
                            if len(num) > 3 or len(num) == 0 or int(num) > 255: # if period is at beginning or end of
                   # ip_candidate, then there will be an
                   # element of length 0 in nums
                                invalid_number = True
                                break
                        if invalid_number is True:
                            ip_candidate = ""
                            continue
                        else:
                            ip_addresses.append(ip_candidate)
                            ip_candidate = ""
            stack.pop()
            path = stack[-1] # guaranteed to not
            # be index error since there is a
            # root at the bottom, files are never
            # at the bottom of the stack, that's just how it is
    if dead_end is True:
        searched.add(path)
        stack.pop()
        if len(stack) != 0: # since we could have just popped
                            # the root folder, we must perform
                            # input validation for index errors
            path = stack[-1]
            
ip_addresses = list(set(ip_addresses))
# print("len(ip_addresses)", len(ip_addresses))
ip_addresses.sort()
# print("ip_addresses", ip_addresses)
for address in ip_addresses:
    print(address)

               
                            
                            

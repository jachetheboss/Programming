/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <fstream>
#include <vector>
using namespace std;

int main()
{
    ifstream fin ("sample.txt");
    vector<vector<int>> tri;
    int limit = 1;
    int row_size = 0;
    int num = 0;
    vector<int> row;
    while(fin >> num){
        row.push_back(num);
        row_size += 1;
        if(row_size == limit){
            tri.push_back(row);
            row.clear();
            row_size = 0;
            limit += 1;
        }
    }
    // top-down
    // for(int i = 1; i < tri.size(); ++i){
    //     tri[i][0] += tri[i - 1][0];
    //     tri[i][tri[i].size() - 1] += tri[i - 1].back(); // hardcode the first and last positions of the row
    //                                                   // for the top down DP way, unlike in the bottom up way
    //     for(int j = 1; j < tri[i].size() - 1; ++j){
    //         tri[i][j] += max(tri[i - 1][j - 1], tri[i - 1][j]);
    //     }
    // }
    // int max_sum = 0;
    // for(int j = 0; j < tri[tri.size() - 1].size(); ++j){
    //     if(tri[tri.size() - 1][j] > max_sum){
    //         max_sum = tri[tri.size() - 1][j];
    //     }
    // }
    // cout << "max_sum: " << max_sum << '\n';
    // cout << "rows in tri: " << tri.size() << '\n';
    // cout << "vals in tri[99] " << tri[99].size() << '\n';
    
    
    // bottom_up
    for(int i = tri.size() - 2; i >= 0; --i){
        for(int j = 0; j < tri[i].size(); ++j){
            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1]);
        }
    }
    cout << "ans: " << tri[0][0] << '\n';
    // cout << "max_sum: " << max_sum << '\n';
    // cout << "rows in tri: " << tri.size() << '\n';
    // cout << "vals in tri[99] " << tri[99].size() << '\n';

    return 0;
}

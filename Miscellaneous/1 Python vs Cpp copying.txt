/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_set>
#include <cmath>

using namespace std;

int main()
{
    unordered_set<int> set1;
    unordered_set<int> set2;
    set1.insert(1); set1.insert(2); set1.insert(3);
    unordered_set<int> set3 = set1; // this assignment seems like a straight up deep copy, not alias in C++
    set1.insert(4); set1.insert(5);
    unordered_set<int>::iterator it;
    cout << "set3" << '\n';
    for(it = set3.begin(); it != set3.end(); ++it){
        cout << *it << ' ';
    } cout << "\n\n";
    cout << "set1" << '\n';
    for(it = set1.begin(); it != set1.end(); ++it){
        cout << *it << ' ';
    } cout << "\n\n";


    // vector<vector<int>> my_vec = {{4,8, 99}, {3,1, 99}, {4,0, 99}, {2,0, 99}, {1,0, 99}};
    // sort(my_vec.begin(), my_vec.end());
    // cout << "my_vec:" << '\n';
    // for(int i = 0; i < my_vec.size(); ++i){
    //     cout << '{' << my_vec[i][0] << ',' << my_vec[i][1] << ',' << my_vec[i][2] << "} ";
    // }
    // unordered_set<int> a;
    // a.insert(7);
    // a.insert(14);
    // unordered_set<int> b;
    // b = a;
    // a.clear();
    // cout << "b.size() " << b.size() << '\n';
    // cout << "a.size() " << a.size() << '\n';
    double val = 5.000;
    if(val == static_cast<int>(val)){
        cout << "hello" << '\n';
    }
    
    return 0;
}